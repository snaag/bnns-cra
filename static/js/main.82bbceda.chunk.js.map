{"version":3,"sources":["loading.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","cheerio","require","axios","App","_useState","useState","_useState2","Object","slicedToArray","seasons","setSeasons","_useState3","_useState4","seasonIdx","setSeasonIdx","_useState5","_useState6","episodeNow","setEpisodeNow","_useState7","_useState8","episodeIdx","setEpisodeIdx","episodes","useRef","mounted","click","_useState9","_useState10","script","setScript","_useState11","_useState12","title","setTitle","scriptClicked","cors_url","getSeasons","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","html","document","str","$","cnt_seasons","newSeasons","name_season","e","cntEpisode","eachEpisodes","b","wrap","_context","prev","next","get","headers","Access-Control-Allow-Origin","sent","data","replace","load","length","concat","text","trim","push","children","current","prevSeasons","toConsumableArray","t0","console","error","stop","apply","this","arguments","clickSeason","idx","target","name","clickEpisode","getScripts","_ref2","_callee2","info","_title","scripts","_context2","useEffect","react_default","createElement","Fragment","style","padding","src","img","alt","map","v","className","exec","onClick","margin","class","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82bbceda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.2eea046d.gif\";","import React, { useState, useRef, useEffect } from 'react';\nimport img from './loading.gif'\nconst cheerio = require('cheerio');\nconst axios = require('axios');\n\n\nconst App = () => {\n  const [seasons, setSeasons] = useState([]);\n  const [seasonIdx, setSeasonIdx] = useState(-1);\n  const [episodeNow, setEpisodeNow] = useState([]);\n  const [episodeIdx, setEpisodeIdx] = useState(-1);\n  const episodes = useRef([]);\n  const mounted = useRef(false);\n  const click = useRef(false);\n  const [script, setScript] = useState('');\n  const [title, setTitle] = useState('');\n  const scriptClicked = useRef(false);\n\n  const cors_url = 'https://cors-anywhere.herokuapp.com/';\n  const bnn_url =\n    'https://www.springfieldspringfield.co.uk/episode_scripts.php?tv-show=brooklyn-nine-nine';\n  const scriptUrl =\n    'https://www.springfieldspringfield.co.uk/view_episode_scripts.php?tv-show=brooklyn-nine-nine&episode=';\n\n  const getSeasons = async () => {\n    try {\n      const html = await axios.get(cors_url + bnn_url, {\n        headers: { 'Access-Control-Allow-Origin': '*' },\n      });\n\n      const document = html.data;\n      const str = document.replace(/<br> /g, '\\n');\n      let $ = cheerio.load(str);\n      const cnt_seasons = $('.season-episodes').length;\n      const newSeasons = [];\n\n      for (let a = 1; a < cnt_seasons + 1; a++) {\n        const name_season = $(`#season${a}`)\n          .text()\n          .trim();\n        const e = $(`#season${a} ~ a`);\n        newSeasons.push(name_season);\n\n        const cntEpisode = e.length;\n        const eachEpisodes = [];\n        for (let b = 0; b < cntEpisode; b++) {\n          eachEpisodes.push(e[b].children[0].data);\n        }\n        episodes.current.push(eachEpisodes);\n      }\n      setSeasons(prevSeasons => [...prevSeasons, ...newSeasons]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  const clickSeason = e => {\n    click.current = true;\n    const idx = e.target.name - 1;\n\n    setSeasonIdx(idx + 1);\n\n    setEpisodeNow(episodes.current[idx]);\n    setEpisodeIdx(-1);\n\n    scriptClicked.current = false;\n    setTitle('');\n    setScript('');\n  };\n\n  const clickEpisode = e => {\n    setEpisodeIdx(e.target.name);\n  };\n\n  // 임의의 script, title을 가져오는 함수\n  const getScripts = async () => {\n    setTitle('');\n    let info = 's';\n    seasonIdx > 9 ? (info += seasonIdx) : (info += '0' + seasonIdx);\n    info = info + 'e';\n    episodeIdx > 9 ? (info += episodeIdx) : (info += '0' + episodeIdx);\n\n    try {\n      const html = await axios.get(cors_url + scriptUrl + info, {\n        headers: { 'Access-Control-Allow-Origin': '*' },\n      });\n\n      const str = html.data.replace(/<br> /g, '\\n');\n      let $ = cheerio.load(str);\n      const title = $('h3')\n        .text()\n        .trim();\n      const scripts = $('div.scrolling-script-container')\n        .text()\n        .trim();\n\n      setTitle(title);\n      setScript(scripts);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (episodeIdx > 0) {\n      getScripts();\n    }\n  }, [episodeIdx]);\n\n  useEffect(() => {\n    scriptClicked.current = true;\n  }, [seasonIdx]);\n\n  useEffect(() => {\n    if (!mounted.current) {\n      // componentDidMount\n      mounted.current = true;\n      getSeasons();\n    } else {\n      // componentDidUpdate\n    }\n  }, [seasons]);\n  return (\n    <>\n      {episodes.current.length < 1 ? (\n        <div style={{padding: \"10px\"}}>\n          <img src={img} alt=\"\"/>\n        </div>\n      ) : (\n        <div style={{padding: \"10px\"}}>\n          <h2>Brooklyn Nine-Nine Scripts  <small>브나나 너무좋아</small></h2>\n          <h3>\n            {seasons.map(v => {\n              return (\n                <button className=\"btn btn-info btn-lg\" name={/\\d+/.exec(v)} onClick={clickSeason} style={{margin: \"2px\"}} >\n                  {v}\n                </button>\n              );\n            })}\n          </h3>\n        </div>\n      )}\n\n      {click.current && (\n        <div style={{padding: \"10px\"}}>\n          {episodeNow.map(v => {\n            return (\n                <button className=\"btn btn-success\" name={/^\\d+/.exec(v)} \n                onClick={clickEpisode} style={{margin: \"2px\"}}\n                >\n                  {v}\n                </button>\n            );\n          })}\n          <h1> </h1>\n        </div>\n      )}\n\n      {scriptClicked.current &&\n        click.current &&\n        (title.length < 2 ? (\n          <p className=\"lead\" style={{padding: \"12px\"}}>\n            <mark>S{seasonIdx}-E{episodeIdx}</mark> script is loading...\n          </p>\n        ) : (\n          <div className=\"\" style={{padding: \"12px\"}}>\n            <p class=\"lead\"><mark>S{seasonIdx}-E{episodeIdx}</mark> {title}  </p>\n            <pre>{script}</pre>\n          </div>\n        ))}\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}